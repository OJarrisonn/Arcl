$ - Token
T - Generic type
? - Can be implicit 
* - Any amount of
+ - At least one

// Declaration
decl $visib? static? const? T $name;                   // Unassined box
decl $visib? static? const? T? $name = $expr;          // Assigned box
decl $visib? static? const? T? $name -> new $expr;     // Assigned pointing box
decl $visib? static? const? T? $name -> $name;         // Assigned pointing box




// Scoping
{ }                             // Empty scope
{ $command;* }                  // Scope that runs code
T?{ $command;* return $expr; }  // Scope that returns a value (can be interpreted as an expression)




// Functions
func<> () {}                                    // Empty function
func<I, O> ($name+) { ... }                     // Function with input and output, a list of arguments and some code to be run
func<I, O> ($name+) $command | return $expr     // Function with input and output, a list of arguments and some code to be run




// Object Definition
objdef<> { 
    field $visib? $type $name;
    field $visib? static? const? $type $name = expr;
    field $visib? static? const? $type $name -> new $expr;
    field $visib? static? const? $type $name -> $name;
    ...

    method $visib? const? <I, O>? $name = func<I, O> (...) {...}
    method virt pub? static? const? <I, O> $name; 
}
objdef<...> // List of types, types annotated with @ are generic