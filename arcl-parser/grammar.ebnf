program ::= link* (decl | cons)* main? (decl | cons)*;

keywords ::=    'cons' | 'decl' | 'link' | 'main' 
                | 'if' | 'else' | 'loop' | 'impl'
                | 'xtnd' | 'null' | 'fail' | 'retn'
                | 'break' | 'continue' | 'while' | 'var'
                | 'read' | 'write' | 'self' | 'Self'
                | 'pure' | 'proc' | 'prll' | 'crash';

ws ::= ' ' | '\n' | '\r' | '\t';
ows ::= ws?;

ident ::= '[a-z][a-zA-Z0-9_]*';
Ident ::= '[A-Z][a-zA-Z0-9_]*';

path ::= ('~' | '.' | ('../')* '..' | '[a-zA-Z0-9_]*') ('/' '[a-zA-Z0-9_]*')+;

link ::= 'link' ws path
        |  'link' ws ident ows '=>' ows path ows;

decl ::= 'decl' ws ('var' ws)? (type ws)? ident ows
        |  'decl' ws ('var' ws)? (type ws)? ident ows(':=' | '=') ows expr ows
        |  'decl' ws ('var' ws)? (type ws)? ident ows '=>' ows ('&' | '@') ows ident ows;

cons ::= 'cons' Ident type
        |  'cons' Ident typespec typeimpl?
        |  'xtnd' type typeimpl;

compound_expr ::= '(' (expr ',')* expr ')';
compound ::= '(' (type ',')* type ')';
named_compound ::= '(' (type ident ',')* type ident')';
object ::= '<' (('read' | 'write')? type ident ',' )* ('read' | 'write')? type ident '>';

type ::= Ident
        |  compound | named_compound | object
        |  ('?' | '!' | '#' | '...') type
        |  ('&' | '@') type
        |  type '<' (type ',')* type '>';

expr ::= 'e';
main ::= 'main';
typespec ::= 'typespec';
typeimpl ::= 'typeimpl';