program = { SOI ~ (link ~ ";"?)* ~ ((decl | cons) ~ ";"?)* ~ (main ~ ";"?)? ~ ((decl | cons) ~ ";"?)* ~ EOI }

keywords = {
    "cons"
  | "decl"
  | "link"
  | "main"
  | "if"
  | "else"
  | "loop"
  | "impl"
  | "xtnd"
  | "null"
  | "fail"
  | "retn"
  | "break"
  | "continue"
  | "while"
  | "var"
  | "read"
  | "write"
  | "self"
  | "Self"
  | bool
  | "pure"
  | "proc"
  | "prll"
  | "crash"
  | primtypes
}

ident = @{ !keywords ~ (('a'..'z') ~ ('a'..'z' | 'A'..'Z' | '0'..'9' | "_")*) }

Ident = @{ ('A'..'Z') ~ ('a'..'z' | 'A'..'Z' | '0'..'9' | "_")* }

path = @{ ("~" | "." | ("../")* ~ ".." | ('a'..'z' | 'A'..'Z' | '0'..'9' | "_")*) ~ ("/" ~ ('a'..'z' | 'A'..'Z' | '0'..'9' | "_")*)+ }

link = { ("link" ~ path | "link" ~ ident ~ "=>" ~ path) ~ ";" }

decl = { "decl" ~ ("var")? ~ (type)? ~ ident ~ (assingop)? }

cons = { "cons" ~ Ident ~ type ~ ";" | "cons" ~ Ident ~ typespec ~ typeimpl? ~ ";" | "xtnd" ~ type ~ typeimpl ~ ";" }

main = { "main" ~ named_compound? ~ ("->" ~ ("#" | "!"))? ~ command }

assingment = { state ~ assingop }

assingop = { assing | copy | point }
assing   = { "=" ~ expr }
copy     = { ":=" ~ expr }
point    = { "=>" ~ ref ~ state }

state = {
    ident ~ accesser*
  | deref+ ~ ident
  | "(" ~ deref* ~ state ~ ")" ~ accesser*
}

accesser = { fieldaccesser | arrayaccesser | methaccesser | compoundaccesser }

if    = { "if" ~ expr ~ command ~ ("else" ~ command)? }
loop  = { "loop" ~ command }
while = { "while" ~ expr ~ command }
// slct expr

number  =  { integer | float }
index   = @{ "0" | ASCII_NONZERO_DIGIT ~ (ASCII_DIGIT)* }
integer =  { decimal | binary | hexadecimal }
// FIXME: Floats não são reconhecidos
float       = @{ ASCII_DIGIT* ~ "." ~ ASCII_DIGIT+ | ASCII_DIGIT+ ~ "." ~ ASCII_DIGIT* }
decimal     = @{ ASCII_DIGIT+ ~ !"." }
binary      = @{ (ASCII_BIN_DIGIT)+ ~ "b" }
hexadecimal = @{ "0x" ~ (ASCII_HEX_DIGIT)+ }

string         =  { string_literal | template_string }
string_literal = @{ "\"" ~ (!"\"" ~ ANY)* ~ "\"" }

template_string     = @{ "`" ~ (!"`" ~ (template_expression | ANY))* ~ "`" }
template_expression = ${ "${" ~ (!"}" ~ expr)* ~ "}" }

char = @{ "'" ~ (!"'" ~ ANY) ~ "'" }
bool = @{ "true " | "false" | "on" | "off" | "yes" | "no" }
null =  { "null" }

compound_expr  = { "(" ~ (expr ~ ",")* ~ expr ~ ")" | "(" ~ ")" | null }
compound       = { "(" ~ (type ~ ",")* ~ type ~ ")" | "(" ~ ")" | void }
named_compound = { "(" ~ (type ~ ident ~ ",")* ~ type ~ ident ~ ")" | "(" ~ ")" | void }
object         = { "<" ~ (("read" | "write")? ~ type ~ ident ~ ",")* ~ ("read" | "write")? ~ type ~ ident ~ ">" }

fieldaccesser    = ${ "." ~ ident }
compoundaccesser = ${ "." ~ index }
methaccesser     =  { ":" ~ ident ~ expr }

void      = { "void" }
primtypes = { "int" | "uint" | "sint" | "usint" | "lint" | "ulint" | "float" | "double" | "treble" | "char" | "bool" }

nullable = { "?" }
failable = { "!" }
crashble = { "#" }
await    = { "..." }

ref       = { read_ref | write_ref }
read_ref  = { "&" }
write_ref = { "@" }

pure = { "pure" }
proc = { "proc" }
prll = { "prll" }

functype = {
    compound ~ "->" ~ type?
  | pure ~ compound ~ "->" ~ type?
  | prll ~ pure ~ compound ~ "->" ~ awaittype
  | proc ~ compound
  | prll ~ proc ~ compound
}

awaittype     = { await ~ type }
crashabletype = { crashble ~ type }
nullabletype  = { nullable ~ type }
failabletype  = { failable ~ type }

arraytype     = { "[" ~ index? ~ "]" ~ type }
arrayaccesser = { "[" ~ expr ~ "]" }

type = {
    void
  | functype
  | primtypes
  | arraytype
  | compound
  | named_compound
  | object
  | nullabletype
  | failabletype
  | crashabletype
  | awaittype
  | ref ~ type
  | Ident ~ ("<" ~ (type ~ ",")* ~ type ~ ">")?
}

command = { decl | assingment | "{" ~ (command ~ ";")* ~ "}" | while | loop | expr | retn }

add      = { "+" }
subtract = { "-" }
multiply = { "*" }
divide   = { "/" }
modulus  = { "%" }
power    = { "^" }
or       = { "||" }
and      = { "&&" }
rel      = { "==" | "!=" | ">" | ">=" | "<" | "<=" }
unwnull  = { "??" }
unwfail  = { "!!" }
opposite = { "-" | "!" }
deref    = { "*" }

expr = {
    unwrap ~ ((unwnull | unwfail) ~ unwrap)?
  | string
  | char
  | bool
  | compound_expr
  | if
  | funcexpr
}

unwrap = {
    term ~ ((add | subtract | or) ~ term)?
}

term = { factor ~ ((multiply | divide | modulus | and) ~ factor)? }

factor = { base ~ ((power | rel) ~ base)? }

base = {
    (ident ~ (expr | accesser)?)
  | (type ~ methaccesser)
  | (opposite | deref | await) ~ expr
  | number
  | bool
  | "(" ~ expr ~ ")" ~ accesser?
}

func_signature = {
    named_compound ~ "->" ~ type?
  | pure ~ named_compound ~ "->" ~ type?
  | prll ~ pure ~ named_compound ~ "->" ~ awaittype
  | proc ~ named_compound
  | prll ~ proc ~ named_compound
}

funcexpr = {
    func_signature ~ command
}

retn = { "retn" ~ expr }

typespec = { "typespec" }

typeimpl = { "typeimpl" }

WHITESPACE = _{ " " | "\t" | "\r" | "\n" }
COMMENT    = _{ ("/*" ~ (!"*/" ~ ANY)* ~ "*/") | "//" ~ (!NEWLINE ~ ANY)* }
