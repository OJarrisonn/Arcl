program = {
    SOI ~ (link ~ ";")* ~ ((test ~ ";")+ | ((coreexpr ~ ";")* ~ main ~ ";" ~ (coreexpr ~ ";")*)) ~ EOI
}

// Expressions ======================================================================================================

coreexpr = _{
    (decl | defn | cons)
}

decl = { "decl" ~ var? ~ typeident? ~ (assingment | ident) }
defn = { "defn" }
cons = { "cons" }
link = { "link" ~ (ident ~ from)? ~ pathident }
test = { "test" }
main = {
    ("main" ~ ((ident ~ (to ~ crashable)?) | (ident? ~ to ~ crashable)) ~ instruction)
  | ("main" ~ instruction)
}

expr = {
    stringlit
  | charlit
  | formatstringexpr
  | integerlit
  | floatlit
  | instexpr
  | assingment
}

instruction = {
    "{" ~ (instruction ~ ";")* ~ "}"
  | decl
  | ifinst
  | assingment
  | call
}

instexpr = {
    "{" ~ (instruction ~ ";")* ~ retn ~ ";" ~ "}"
  | ifexpr
  | retn
  | call
}

call       = { ident ~ expr }
assingment = { ident ~ (copy ~ expr | to ~ ref ~ (deref)* ~ ident) }
retn       = { "retn" ~ expr }
ifinst     = { "if" ~ expr ~ instruction ~ ("else" ~ instruction)? }
ifexpr     = { "if" ~ expr ~ instexpr ~ ("else" ~ instexpr)? }

// Operators ===========================================================================================================
to   = { "->" }
from = { "<-" }
copy = { "=" }

ref      = { readref | writeref }
readref  = { "&" }
writeref = { "@" }
deref    = { "*" }

nullable  = { "?" }
failable  = { "!" }
crashable = { "#" }

accesstype = @{ "read" | "write" }

var = { "var" }

// Identifiers =========================================================================================================
// acident = @{ "_"? ~ ASCII_ALPHA_UPPER ~ (ASCII_ALPHA_UPPER | "_")* }
// scident = @{ "_"? ~ ASCII_ALPHA_LOWER ~ (ASCII_ALPHA_LOWER | "_")* }
// pcident = @{ "_"? ~ (ASCII_ALPHA_UPPER ~ ASCII_ALPHA_LOWER*)+}

ident = @{ "_"? ~ (ASCII_ALPHA) ~ (ASCII_ALPHANUMERIC | "_")* }

// moduleident = _{ ident }
// linkident = _{ ident }

pathident = @{ ("~" | ASCII_ALPHA_LOWER+)? ~ ("/" ~ (ASCII_ALPHA_LOWER | "_")+)+ }
typeident =  {
    ident
  | scpdident
  | cpdident
  | ncdpident
  | objident
  | arrayident
  | blockident
  | tpltident
  | (ref ~ typeident)
  | ((nullable | failable | crashable) ~ typeident)
}

scpdident  = _{ "(" ~ typeident ~ ")" }
cpdident   = _{ "(" ~ (typeident ~ ",")* ~ typeident? ~ ")" }
ncdpident  = _{ "(" ~ (typeident ~ ident ~ ",")* ~ (typeident ~ ident)? ~ ")" }
objident   = _{ "<" ~ (accesstype ~ typeident ~ ident ~ ",")* ~ (accesstype ~ typeident ~ ident)? ~ ">" }
arrayident = _{ "[" ~ typeident ~ integerlit ~ "]" }
blockident = _{ "[" ~ typeident ~ "]" }
tpltident  = _{ ident ~ "<" ~ (typeident ~ ",")* ~ typeident? ~ ">" }

// Literals =============================================================================================================
stringlit        = ${ "\"" ~ stringinner ~ "\"" }
formatstringexpr = ${ "`" ~ (formatstringinner ~ ("{" ~ ident ~ "}") ~ formatstringinner)* ~ "`" }
charlit          = ${ "\'" ~ charinner ~ "\'" }

integerlit = @{ ASCII_DIGIT+ }
floatlit   = @{ (ASCII_DIGIT+ ~ "." ~ ASCII_DIGIT*) | (ASCII_DIGIT* ~ "." ~ ASCII_DIGIT+) }

stringinner       = @{ charinner* }
formatstringinner = @{ formatcharinner* }
charinner         =  {
    !("\"" | "\\") ~ ANY
  | "\\" ~ ("\"" | "\\" | "/" | "b" | "f" | "n" | "r" | "t")
  | "\\" ~ ("u" ~ ASCII_HEX_DIGIT{4})
}
formatcharinner   =  {
    !("`" | "\\" | "{") ~ ANY
  | "\\" ~ ("\"" | "\\" | "/" | "b" | "f" | "n" | "r" | "t" | "{")
  | "\\" ~ ("u" ~ ASCII_HEX_DIGIT{4})
}

WHITESPACE = _{ " " | "\t" | "\r" | "\n" }
COMMENT    = _{ "/*" ~ (!"*/" ~ ANY)* ~ "*/" }
